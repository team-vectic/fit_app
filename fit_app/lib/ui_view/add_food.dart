import 'package:dio/dio.dart';
import 'package:fit_app/fitness_app_home_screen.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fit_app/fitness_app_theme.dart';
import 'foodModel.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:intl/intl.dart';
enum Status { LOADING, ERROR, DATA, IDLE }


void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material App',
      home: FoodPage(),
    );
  }
}

class FoodPage extends StatefulWidget {
  FoodPage({Key key}) : super(key: key);

  @override
  _FoodPageState createState() => _FoodPageState();
}

class _FoodPageState extends State<FoodPage> {

  final _api = APICalls();

  Autogenerated dishes;
  String error;
  Status status = Status.IDLE;
  TextEditingController controller;
  String query;
  Future<void> filterSearchResults() async {
    status = Status.LOADING;
    setState(() {});
    try {
      final data = await _api.fetchDishes(controller.text);
      dishes = data;
      status = Status.DATA;
      setState(() {});
    } catch (e) {
      error = e.toString();
      status = Status.ERROR;
      setState(() {});
    }
  }

  @override
  void initState() {
    controller = TextEditingController()
      ..addListener(() {
        if (controller.text != null &&
            controller.text != '' &&
            query != controller.text) {
          query = controller.text;
          filterSearchResults();
        }
      });
    super.initState();
  }

  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }

  Widget get _widget {
    switch (status) {
      case Status.LOADING:
        return Center(child: CircularProgressIndicator());
        break;
      case Status.ERROR:
        return Center(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              error ?? 'An errro occured',
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.headline5.copyWith(
                    color: Colors.red,
                  ),
            ),
          ),
        );
        break;
      case Status.DATA:
        return DefaultTabController(
          length: 2,
          child: Column(
            children: [
              TabBar(
                tabs: [
                  Tab(text: 'Common'),
                  Tab(text: 'Branded'),
                ],
              ),
              Expanded(
                child: TabBarView(
                  children: [
                    ListWidget(
                      dishes: dishes,
                      pageIndex: 0,
                    ),
                    ListWidget(
                      dishes: dishes,
                      pageIndex: 1,
                    ),
                  ],
                ),
              ),
            ],
          ),
        );

        break;
      default:
        return Center(
          child: Text(
            'Search something',
            style: Theme.of(context).textTheme.headline5.copyWith(
                  color: Colors.grey,
                ),
          ),
        );
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: FitnessAppTheme.darkBackground,
        appBar: PreferredSize(
          child: Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              style: TextStyle(color: Colors.white),
              controller: controller,
              decoration: InputDecoration(
                hintStyle: TextStyle(color: FitnessAppTheme.white),
                labelStyle: TextStyle(color: FitnessAppTheme.white),
                labelText: "Search",
                hintText: "Search",
                prefixIcon: Icon(
                  Icons.search,
                  color: Colors.white,
                ),
                enabledBorder: const OutlineInputBorder(
                    borderRadius: BorderRadius.all(Radius.circular(25.0)),
                    borderSide:
                        const BorderSide(color: Colors.white, width: 1.0)),
                border: const OutlineInputBorder(),
              ),
            ),
          ),
          preferredSize: Size.fromHeight(90),
        ),
        body: Container(
          child: _widget,
        ),
      ),
    );
  }
}

class ListWidget extends StatelessWidget {
  const ListWidget({
    Key key,
    this.pageIndex,
    @required this.dishes,
  }) : super(key: key);
  final int pageIndex;
  final Autogenerated dishes;

  @override
  Widget build(BuildContext context) {
    switch (pageIndex) {
      case 0: //Common
        if (dishes.common.isEmpty) {
          return Center(
            child: Text(
              'NO DATA FOUND',
              style: Theme.of(context).textTheme.headline6.copyWith(
                    color: Colors.grey,
                  ),
            ),
          );
        }
        return ListView.builder(
          itemCount: dishes.common.length,
          itemBuilder: (context, index) {
            final data = dishes.common[index].foodName;
            return ListItem(
              text: data,
            );
          },
        );
        break;

      case 1: //Brand
        if (dishes.branded.isEmpty) {
          return Center(
            child: Text(
              'NO DATA FOUND',
              style: Theme.of(context).textTheme.headline6.copyWith(
                    color: Colors.grey,
                  ),
            ),
          );
        }
        return ListView.builder(
          itemCount: dishes.branded.length,
          itemBuilder: (context, index) {
            if (dishes.branded.isEmpty) {
              return Center(
                child: Text('NO DATA FOUND'),
              );
            }
            final data = dishes.branded[index].foodName;
            return ListItem(text: data);
          },
        );
        break;
      default:
        return SizedBox.shrink();
    }
  }
}

class ListItem extends StatelessWidget {


  ListItem({
    Key key,
    @required this.text,
    this.onTap,
  }) : super(key: key);

  final String text;
  final Function onTap;

    Future<void> updateNutrition(int protein, int fat, int carbs, int eaten, var context ){
      var userid =  FirebaseAuth.instance.currentUser.uid;
      var now = new DateTime.now();
      var formatter = new DateFormat('yyyy-MM-dd');
      String today = formatter.format(now);
      var curProtein;
      var curFat;
      var curCarbs;
      var curEaten;


      FirebaseDatabase.instance.reference().child('users').child("$userid").
        child("food").child("$today").child("eaten").once().
        then((DataSnapshot snapshot){
        var value = snapshot.value;
        if(value != null)
        {
          curProtein = value["protein"];
          curFat = value["fat"];
          curCarbs = value["carbs"];
          curEaten = value["eaten"];
          var newProtein = curProtein + protein;
          
          var newEaten = curEaten + eaten;
          var newFat = curFat + fat;
          var newCarbs = curCarbs + carbs;
          print('$newCarbs, $newFat, $newEaten, $newProtein');
          
                FirebaseDatabase.instance.reference().child('users').child("$userid").
              child("food").child("$today").child("eaten")
                .update
                ({
                    "protein" : newProtein,
                    "eaten" : newEaten,
                    "fat" : newFat,
                    "carbs" : newCarbs,
                })
                .then((value) =>       
                  Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => FitnessAppHomeScreen())
                ),          
                )
                .catchError((error) => print("Failed to add user: $error"));

        }
        });

    }
    Future<void> addFoodToFirebase(var category, var foodname, var context, var foodcal){
    var userid =  FirebaseAuth.instance.currentUser.uid;
    var now = new DateTime.now();
    var formatter = new DateFormat('yyyy-MM-dd');
    var newCal;
    String today = formatter.format(now);

    FirebaseDatabase.instance.reference().child('users').child("$userid").
      child("food").child("$today").child("eaten").child("$category").once().
      then((DataSnapshot snapshot){
            var value = snapshot.value;
            if(value != null)
            {
              var i = 0;
              var string = ""; 
              List<String> items = value["data"].toString().split(",");
              if (items.length == 1) {
                foodcal = double.parse(foodcal).floor();
                FirebaseDatabase.instance.reference().child('users').child("$userid").
                child("food").child("$today").child("eaten").child("$category")
                  .set
                  ({
                      "data" :  "$foodname , $foodcal"
                  })
                  .then((value) =>       
                    Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => FitnessAppHomeScreen())
                  ),          
                  )
                  .catchError((error) => print("Failed to add user: $error"));

                }
                else{
                items.forEach((element) {
                if(i != items.length-1){
                  string = string + element + ",";
                }
                if(i == items.length-1){
                  newCal = int.parse(items[i]) + double.parse(foodcal).floor();
                  print("calories written - $newCal");
                }
                i++;
              }
              );
              FirebaseDatabase.instance.reference().child('users').child("$userid").
              child("food").child("$today").child("eaten").child("$category")
                .set
                ({
                    "data" : "$string $foodname , $newCal"
                })
                .then((value) =>       
                  Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => FitnessAppHomeScreen())
                ),          
                )
                .catchError((error) => print("Failed to add user: $error"));

                }


            }
      });

  }


  final _api = APICalls();
  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.transparent,
      child: ListTile(
        tileColor: FitnessAppTheme.nearlyDark,
        title: Text(
          text,
          style: TextStyle(
            color: FitnessAppTheme.white,
            fontStyle: FontStyle.italic,
          ),
        ),
        onTap: () async {
          FocusScope.of(context).requestFocus(FocusNode());
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              backgroundColor: FitnessAppTheme.darkBackground,
              scrollable: true,
              content: Center(
                child: CircularProgressIndicator(),
              ),
            ),
          );
          try {
            FoodData dishData;
            dishData = await _api.fetchDishData(text);
            Navigator.pop(context);
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  scrollable: true,
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.push(
                          context,
                          new MaterialPageRoute(builder: (context) => new FoodPage()),
                        );                      },
                      child: Text('Cancel'),
                    ),
                    TextButton(
                      onPressed: () {
                          showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              scrollable: true,
                              actions: [
                                TextButton(
                                  onPressed: () {
                                    var protein = double.parse(dishData.foods[0].nfProtein.toString());
                                    var fat = double.parse(dishData.foods[0].nfTotalFat.toString());
                                    var carbs = double.parse(dishData.foods[0].nfTotalCarbohydrate.toString());
                                    var eaten = double.parse(dishData.foods[0].nfCalories.toString());

                                    updateNutrition(protein.floor(), fat.floor(), carbs.floor(), eaten.floor(), context);
                                    addFoodToFirebase("breakfast", "${dishData.foods[0].foodName[0].toUpperCase()}${dishData.foods[0].foodName.substring(1)}", context, dishData.foods[0].nfCalories.toString());
                                  },
                                  child: Text('Breakfast'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    var protein = double.parse(dishData.foods[0].nfProtein.toString());
                                    var fat = double.parse(dishData.foods[0].nfTotalFat.toString());
                                    var carbs = double.parse(dishData.foods[0].nfTotalCarbohydrate.toString());
                                    var eaten = double.parse(dishData.foods[0].nfCalories.toString());

                                    updateNutrition(protein.floor(), fat.floor(), carbs.floor(), eaten.floor(), context);

                                    addFoodToFirebase("launch", "${dishData.foods[0].foodName[0].toUpperCase()}${dishData.foods[0].foodName.substring(1)}", context, dishData.foods[0].nfCalories.toString());
                                  },
                                  child: Text('Launch'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    var protein = double.parse(dishData.foods[0].nfProtein.toString());
                                    var fat = double.parse(dishData.foods[0].nfTotalFat.toString());
                                    var carbs = double.parse(dishData.foods[0].nfTotalCarbohydrate.toString());
                                    var eaten = double.parse(dishData.foods[0].nfCalories.toString());

                                    updateNutrition(protein.floor(), fat.floor(), carbs.floor(), eaten.floor(), context);
                                   
                                    addFoodToFirebase("dinner", "${dishData.foods[0].foodName[0].toUpperCase()}${dishData.foods[0].foodName.substring(1)}", context, dishData.foods[0].nfCalories.toString());
                                  },
                                  child: Text('Dinner'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    var protein = double.parse(dishData.foods[0].nfProtein.toString());
                                    var fat = double.parse(dishData.foods[0].nfTotalFat.toString());
                                    var carbs = double.parse(dishData.foods[0].nfTotalCarbohydrate.toString());
                                    var eaten = double.parse(dishData.foods[0].nfCalories.toString());

                                    updateNutrition(protein.floor(), fat.floor(), carbs.floor(), eaten.floor(), context);

                                    addFoodToFirebase("snacks", "${dishData.foods[0].foodName[0].toUpperCase()}${dishData.foods[0].foodName.substring(1)}", context, dishData.foods[0].nfCalories.toString());
                                  },
                                  child: Text('Snacks'),
                                ),
                              ],
                              title: Text(
                                "So, What Time? ",
                                style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w100,
                                    fontSize: 17),
                              ),
                              backgroundColor: FitnessAppTheme.darkBackground,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.all(
                                  Radius.circular(20.0),
                                ),
                              ),
                            );
                          });
                      },
                      child: Text('Add'),
                    ),
                  ],
                  title: Text(
                    "Would You Like To Add This Food?",
                    style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w100,
                        fontSize: 17),
                  ),
                  backgroundColor: FitnessAppTheme.darkBackground,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(20.0),
                    ),
                  ),
                  content: ListTile(
                    title:
                    Center(
                      child:Text("In ${dishData.foods[0].servingQty.toString()} ${dishData.foods[0].servingUnit} you will have- \n ", style: TextStyle(fontSize: 15,color: Colors.white))
                    ),
                    subtitle: Column(
                    children: <Widget>[
                    Text("Calories - " +
                    dishData.foods[0].nfCalories.toString()
                    + "g",              
                    style: TextStyle(
                      color: Colors.white,
                    ),
                    ),
                    Text("Protein - " +
                    dishData.foods[0].nfProtein.toString()
                    + "g",                   
                    style: TextStyle(
                      color: Colors.white,
                    ),
                    ),
                    Text("Fat - " +
                    dishData.foods[0].nfTotalFat.toString()
                    + "g" + "\n",                   
                    style: TextStyle(
                      color: Colors.white,
                    ),
                    ),
                    Text("${dishData.foods[0].foodName.toString()}", style: TextStyle(fontStyle: FontStyle.italic, fontWeight: FontWeight.bold, color: FitnessAppTheme.white)),
                    ]
                  )
                  )
                );
              },
            );
          } catch (e) {
            print(e.runtimeType);
            Navigator.pop(context);
            if (e is Map<String, dynamic>) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                    e['message'],
                  ),
                  backgroundColor: Colors.red,
                ),
              );
            } else {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                    e.toString(),
                  ),
                  backgroundColor: Colors.red,
                ),
              );
            }
          }
        },
      ),
    );
  }
}

class APICalls {
  final Dio dio = Dio();
  Future<Autogenerated> fetchDishes(String query) async {
    try {
      String url =
          'https://trackapi.nutritionix.com/v2/search/instant?query=$query';

      final response = await dio.get(
        url,
        options: Options(
          headers: {
            "x-app-id": "26706c4b",
            "x-app-key": "496693e69b3996ce96fec5eeb79a3c26",
          },
        ),
      );
      return Autogenerated.fromJson(response.data);
    } on DioError catch (e) {
      return Future.error(e);
    }
  }

  Future<FoodData> fetchDishData(String query) async {
    final Dio dio = Dio();
    var body = ({
      "query": query,
    });
    try {
      final response = await dio.post(
        'https://trackapi.nutritionix.com/v2/natural/nutrients',
        options: Options(
          headers: {
            "x-app-id": "26706c4b",
            "x-app-key": "496693e69b3996ce96fec5eeb79a3c26",
            "x-remote-user-id": "0"
          },
        ),
        data: body,
      );
      return FoodData.fromJson(response.data);
      // return compute(parseDataDish, response.data);
    } on DioError catch (e) {
      return Future.error(e.response.data);
    }
  }

  Autogenerated parseDishes(dynamic data) {
    return Autogenerated.fromJson(data);
  }

  List<FoodData> parseDataDish(dynamic data) {
    print(data.runtimeType);
    final list = <FoodData>[];
    for (var json in data) {
      list.add(FoodData.fromJson(json));
    }
    return list;
  }
}
